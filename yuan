// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract PresaleToken is ERC20, Ownable {
    // Define the token
    constructor() ERC20("Life Genomic Token", "YGEN") {
        _mint(address(this), 1000000 * 10 ** decimals()); // Mint 1 million tokens to the contract
    }
}

contract PresaleContract is Ownable {
    IERC20 public token;
    uint256 public rate; // Number of tokens per ether
    uint256 public startTime;
    uint256 public endTime;
    bool public isPaused;

    event TokensPurchased(address indexed purchaser, uint256 amount);

    constructor(IERC20 _token, uint256 _rate, uint256 _startTime, uint256 _endTime) {
        require(address(_token) != address(0), "Invalid token address");
        require(_rate > 0, "Rate must be greater than zero");
        require(_startTime < _endTime, "Start time must be before end time");

        token = _token;
        rate = _rate;
        startTime = _startTime;
        endTime = _endTime;
        isPaused = false;
    }

    modifier onlyWhileOpen() {
        require(block.timestamp >= startTime && block.timestamp <= endTime, "Presale is not open");
        require(!isPaused, "Presale is paused");
        _;
    }

    function buyTokens() public payable onlyWhileOpen {
        uint256 tokenAmount = msg.value * rate;
        require(token.balanceOf(address(this)) >= tokenAmount, "Not enough tokens in contract");

        token.transfer(msg.sender, tokenAmount);
        emit TokensPurchased(msg.sender, tokenAmount);
    }

    function pausePresale() public onlyOwner {
        isPaused = true;
    }

    function resumePresale() public onlyOwner {
        isPaused = false;
    }

    function withdrawFunds() public onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    function withdrawRemainingTokens() public onlyOwner {
        token.transfer(owner(), token.balanceOf(address(this)));
    }
}
